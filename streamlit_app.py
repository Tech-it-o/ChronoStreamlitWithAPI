import streamlit as st
from datetime import datetime, timedelta
import pytz
from google_auth_oauthlib.flow import Flow
from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
import requests
import torch
import json
import re
import ast
import base64
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

st.set_page_config(page_title="ChronoCall-Q", page_icon="üóìÔ∏è")

st.markdown("""
    <style>
    /* ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏£‡∏≠‡∏ö‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á */
    div[data-baseweb="input"] > div {
        border: 2px solid #a020f0 !important;
        border-radius: 6px;
        padding: 2px;
        box-shadow: none !important;
    }

    /* ‡∏ï‡∏≠‡∏ô focus ‡πÅ‡∏•‡πâ‡∏ß */
    div[data-baseweb="input"] > div:focus-within {
        border: 2px solid #a020f0 !important;
        box-shadow: 0 0 0 2px rgba(160, 32, 240, 0.3) !important;
    }

    /* input ‡∏î‡πâ‡∏≤‡∏ô‡πÉ‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏á‡∏≤‡∏™‡∏µ‡πÅ‡∏î‡∏á‡πÄ‡∏•‡∏¢ */
    input {
        border: none !important;
        outline: none !important;
        box-shadow: none !important;
    }

    /* ‡∏•‡∏ö‡∏û‡∏ß‡∏Å‡∏Å‡∏£‡∏≠‡∏ö‡πÅ‡∏î‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏≠‡∏ö‡∏ã‡πà‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà */
    .css-1cpxqw2, .css-1d391kg, .css-1y4p8pa {
        border: 2px solid #a020f0 !important;
        box-shadow: none !important;
    }

    /* force ‡∏Å‡∏•‡πà‡∏≠‡∏á input ‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡πÅ‡∏î‡∏á‡πÅ‡∏°‡πâ‡∏à‡∏∞ error */
    div:has(input:focus) {
        border-color: #a020f0 !important;
    }

    /* ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏°‡πà‡∏ß‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠ hover */
    details:hover > summary {
        color: #9D00FF !important;
        font-weight: bold;
    }

    /* ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ caret ^ (‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏™‡∏≤‡∏°‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°) ‡∏ï‡∏≠‡∏ô hover */
    details:hover summary::-webkit-details-marker {
        color: #9D00FF !important;
    }
    </style>
""", unsafe_allow_html=True)


# --- Model ---

def convert_to_dict(text):
    match = re.search(r"<tool_call>\n(.*?)\n</tool_call>", text)

    if match:
        tool_dict_str = match.group(1)
        try:
            result = ast.literal_eval(tool_dict_str)
            return(result)
        except Exception as e:
            return({})
    else:
        return({})

# --- API ---

API_URL = "https://06cc-2403-6200-89a8-e79b-6052-f6a9-a0e4-e75d.ngrok-free.app/generate"

def get_model_answer(messages):
    try:
        response = requests.post(API_URL, json={"messages": messages})
        if response.status_code == 200:
            return response.json().get("response", "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö response ‡∏à‡∏≤‡∏Å API")
        else:
            return f"‚ùå API error: {response.status_code} - {response.text}"
    except Exception as e:
        return f"‚ùå Request failed: {str(e)}"

# --- Calendar ---

SCOPES = ['https://www.googleapis.com/auth/calendar']

with open("style.css") as f:
    st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

def get_base64_image(image_path):
    with open(image_path, "rb") as img_file:
        b64_data = base64.b64encode(img_file.read()).decode()
    return b64_data

def create_flow():
    return Flow.from_client_config(
        {
            "web": {
                "client_id": st.secrets["client_id"],
                "client_secret": st.secrets["client_secret"],
                "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                "token_uri": "https://oauth2.googleapis.com/token",
                "redirect_uris": [st.secrets["redirect_uri"]],
            }
        },
        scopes=SCOPES,
        redirect_uri=st.secrets["redirect_uri"]
    )

def generate_auth_url(flow):
    auth_url, _ = flow.authorization_url(prompt='consent', access_type='offline', include_granted_scopes='true')
    return auth_url

def create_service(creds):
    return build("calendar", "v3", credentials=creds)

# --- Adding ---

def extract_time_or_dash(iso_time: str) -> str:
    try:
        dt = datetime.fromisoformat(iso_time)

        if "T" in iso_time:
            return dt.strftime("%H:%M")
        else:
            return "-"
    except ValueError:
        return "-"

def handle_calendar_action(service, action_data):
    name = action_data.get("name")
    args = action_data.get("arguments", {})
    
    if name == "add_event_date":
        date_str = args["date"]
        time_str = args["time"]
        title = args["title"]

        dt_start = datetime.strptime(f"{date_str} {time_str}", "%Y-%m-%d %H:%M")
        dt_end = dt_start + timedelta(hours=1)

        event = {
            'summary': title,
            'start': {
                'dateTime': dt_start.isoformat(),
                'timeZone': 'Asia/Bangkok',
            },
            'end': {
                'dateTime': dt_end.isoformat(),
                'timeZone': 'Asia/Bangkok',
            },
        }

        created = service.events().insert(calendarId='primary', body=event).execute()
        st.success(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°: {title} [‡∏î‡∏π‡πÉ‡∏ô Calendar]({created.get('htmlLink')})")

    elif name == "delete_event_date":
        date_str = args["date"]
        title = args["title"]
        events = get_events_by_date_and_title(service, date_str, title)
        if events:
            for event in events:
                service.events().delete(calendarId='primary', eventId=event['id']).execute()
            st.success(f"üóë ‡∏•‡∏ö‡∏ô‡∏±‡∏î: {title} ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {date_str} ‡πÅ‡∏•‡πâ‡∏ß")
        else:
            st.warning(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏±‡∏î: {title} ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {date_str}")

    elif name == "update_event":
        date_str = args["date"]
        new_time_str = args["time"]
        title = args["title"]
        events = get_events_by_date_and_title(service, date_str, title)

        if events:
            for event in events:
                new_start = datetime.strptime(f"{date_str} {new_time_str}", "%Y-%m-%d %H:%M")
                new_end = new_start + timedelta(hours=1)
                event["start"]["dateTime"] = new_start.isoformat()
                event["end"]["dateTime"] = new_end.isoformat()
                service.events().update(calendarId='primary', eventId=event["id"], body=event).execute()
            st.success(f"‚úèÔ∏è ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î: {title} ‡πÄ‡∏õ‡πá‡∏ô {new_time_str}")
        else:
            st.warning(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏±‡∏î: {title} ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {date_str}")

    elif name == "view_event_date":
        date_str = args["date"]
        events = get_events_by_date(service, date_str)
        if not events:
            st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ô‡∏±‡∏î‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ")
        else:
            st.write(f"üìÖ ‡∏ô‡∏±‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {date_str}:")
            for e in events:
                date = e['start'].get('dateTime', e['start'].get('date'))
                time = extract_time_or_dash(date)
                st.write(f"- {e['summary']} ‡πÄ‡∏ß‡∏•‡∏≤: {time}")

def get_events_by_date(service, date_str):
    date_obj = datetime.strptime(date_str, "%Y-%m-%d")
    start = date_obj.strftime("%Y-%m-%dT00:00:00Z")
    end = (date_obj + timedelta(days=1)).strftime("%Y-%m-%dT00:00:00Z")
    
    # # DEBUG
    # st.write(f"Fetching events for date: {date_str}")
    # st.write(f"timeMin = {start}, timeMax = {end}")

    try:
        events_result = service.events().list(
            calendarId='primary',
            timeMin=start,
            timeMax=end,
            singleEvents=True,
            orderBy='startTime'
        ).execute()
        return events_result.get('items', [])
    
    except HttpError as error:
        st.error(f"‚ùå Google Calendar API error: {error}")
        return []

    except Exception as e:
        st.error(f"‚ùå Unknown error: {e}")
        return []

def get_events_by_date_and_title(service, date_str, title):
    events = get_events_by_date(service, date_str)
    return [e for e in events if e.get("summary") == title]

# --- Email ---

sender = st.secrets["email"]["sender"]
receiver = st.secrets["email"]["receiver"]
password = st.secrets["email"]["password"]

def send_email(user_email):
    subject = "New Beta Tester - ChronoCall-Q"
    body = f"""\
    ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏™‡∏ô‡πÉ‡∏à‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° Beta Test
    ‡∏≠‡∏µ‡πÄ‡∏°‡∏•: {user_email}
    """

    msg = MIMEMultipart()
    msg["From"] = sender
    msg["To"] = receiver
    msg["Subject"] = subject
    msg.attach(MIMEText(body, "plain"))

    try:
        with smtplib.SMTP_SSL("smtp.gmail.com", 465) as server:
            server.login(sender, password)
            server.sendmail(sender, receiver, msg.as_string())
        return True
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        return False

# --- Streamlit ---

def main():

    # ‡∏î‡∏∂‡∏á query params
    params = st.query_params
    code = params.get("code", None)

    # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ login
    if "credentials" not in st.session_state:
        if code:
            flow = create_flow()
            try:
                flow.fetch_token(code=code)
                creds = flow.credentials
                st.session_state["credentials"] = {
                    "token": creds.token,
                    "refresh_token": creds.refresh_token,
                    "token_uri": creds.token_uri,
                    "client_id": creds.client_id,
                    "client_secret": creds.client_secret,
                    "scopes": creds.scopes
                }
                st.success("üéâ ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
                st.rerun()
            except Exception as e:
                st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
                return
        else:
            flow = create_flow()
            auth_url = generate_auth_url(flow)

            # --- Title + Login ---

            st.markdown(f"""
                <!-- ‡∏ä‡∏∑‡πà‡∏≠ -->
                <div class="fade-in-title custom-title">ChronoCall-Q</div>

                <!-- ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ -->
                <div class="fade-in-subtitle">
                    Intelligent Calendar Command Parser
                </div>

                <!-- ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï -->
                <div class="fade-in-credit">
                    By TechitoTamani | wayward-wolves
                </div>

                <!-- ‡∏õ‡∏∏‡πà‡∏° -->
                <div class="fade-in-button login-button" style="margin-top: 30px; text-align: center;">
                    <a href="{auth_url}" target="_blank" rel="noopener noreferrer">
                        <button>Login with Google</button>
                    </a>
                </div>
            """, unsafe_allow_html=True)

            # --- Emali sender ---

            st.markdown("""
            <div class="fade-in-up">
                <p>‡∏ñ‡πâ‡∏≤ <strong>Login ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°?</strong><br>‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£! ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° Beta Test ‡∏°‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢</p>
            </div>
            """, unsafe_allow_html=True)

            email = st.text_input("‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà")

            if st.button("‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° Beta Test"):
                if email:
                    if send_email(email):
                        st.success("‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
                    else:
                        st.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
                else:
                    st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏î‡∏™‡πà‡∏á")

            # --- pic ---

            img_b64 = get_base64_image("IMG_1358.jpg")

            st.markdown(f'''
                <img src="data:image/jpeg;base64,{img_b64}" class="fade-in-image">
            ''', unsafe_allow_html=True)

            st.stop()

    # Logged in
    creds = Credentials(**st.session_state["credentials"])
    service = create_service(creds)

    st.title("ChronoCall-Q")
    st.caption("‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")

    with st.expander("‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå (Add Event)"):
        st.markdown("""
    ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏:
    - **‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå**
    - **‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà**
    - **‡πÄ‡∏ß‡∏•‡∏≤**

    > **‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:** ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏î‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏ï‡∏≠‡∏ô‡∏™‡∏¥‡∏ö‡πÇ‡∏°‡∏á
    """)

    with st.expander("‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå (Delete Event)"):
        st.markdown("""
    ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏:
    - **‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå**
    - **‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà**

    > **‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:** ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏î‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏ï‡∏≠‡∏ô‡∏™‡∏¥‡∏ö‡πÇ‡∏°‡∏á
    """)

    with st.expander("‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå (Update Event)"):
        st.markdown("""
    ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏:
    - **‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå**
    - **‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà**
    - **‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡∏°‡πà**

    > **‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:** ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ô‡∏±‡∏î‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏¥‡∏ö‡πÄ‡∏≠‡πá‡∏î‡πÇ‡∏°‡∏á
    """)

    with st.expander("‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå (View Events)"):
        st.markdown("""
    ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡πÉ‡∏î‡∏ß‡∏±‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏:
    - **‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π**

    > **‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:** ‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏ô‡∏±‡∏î‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á
    """)

    if "user_input" not in st.session_state:
        st.session_state.user_input = ""
        

    user_input = st.text_input("‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î Enter ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô", value=st.session_state.user_input, key="input")

    submit_button = st.button("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô")

    if (user_input and user_input != st.session_state.user_input) or submit_button:

        bangkok_tz = pytz.timezone("Asia/Bangkok")
        now = datetime.now(bangkok_tz)
        current_date = now.strftime("%Y-%m-%d")
        current_day = now.strftime("%A")

        messages = [
            {
                "role": "system",
                "content": f"You are Qwen, created by Alibaba Cloud. You are a helpful assistant.\n\nCurrent Date: {current_date}.\n\nCurrent Day: {current_day}."
            },
            {
                "role": "user",
                "content": user_input
            }
        ]

        with st.spinner("‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏¥‡∏î..."):
            response = get_model_answer(messages)

        st.success(f"Chrono: {response}")
        func_call_dict = convert_to_dict(response)
        handle_calendar_action(service, func_call_dict)

        st.session_state.user_input = ""

if __name__ == "__main__":
    main()